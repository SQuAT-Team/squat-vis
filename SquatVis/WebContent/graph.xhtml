<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
	xmlns:tp="http://xmlns.jcp.org/jsf/composite/components"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:pf="http://primefaces.org/ui"
	xmlns:pt="http://xmlns.jcp.org/jsf/passthrough">

<!-- LIBS -->
<h:outputScript library="lib" name="jquery.min.js" target="head"></h:outputScript>
<h:outputScript library="lib" name="popper.min.js" target="body"></h:outputScript>
<h:outputStylesheet name="fontawesome/css/all.css" target="head"></h:outputStylesheet>
<h:outputScript library="lib" name="jquery.contextMenu.min.js"
	target="body"></h:outputScript>
<h:outputScript library="lib" name="jquery.ui.position.min.js"
	target="body"></h:outputScript>
<h:outputStylesheet library="lib" name="jquery.contextMenu.min.css"
	target="head"></h:outputStylesheet>
<h:outputScript library="lib" name="d3.min.js" target="head"></h:outputScript>
<h:outputScript library="lib" name="d3-tip.js" target="head"></h:outputScript>
<h:outputScript name="bootstrap-4.3.1-dist/js/bootstrap.min.js"
	target="body"></h:outputScript>
<h:outputStylesheet name="bootstrap-4.3.1-dist/css/bootstrap.min.css"
	target="head"></h:outputStylesheet>

<!-- D3 Visualizations -->
<h:outputScript library="js" name="d3_helpers.js" target="head"></h:outputScript>
<h:outputScript library="js" name="graph_standard_methods.js" target="head"></h:outputScript>
<h:outputScript library="d3" name="d3_parallel_coordinates.js" target="head"></h:outputScript>
<h:outputScript library="d3" name="d3_graph.js" target="head"></h:outputScript>
<h:outputScript library="d3" name="d3_bi_graph.js" target="head"></h:outputScript>
<h:outputScript library="d3" name="d3_star.js" target="head"></h:outputScript>

<!-- JAVASCRIPT -->
<h:outputScript library="js" name="standard_methods.js" target="body"></h:outputScript>
<h:outputScript library="js" name="popover_activator.js" target="body"></h:outputScript>
<h:outputScript library="js" name="toolbar.js" target="body"></h:outputScript>
<h:outputScript library="js" name="header.js" target="body"></h:outputScript>
<h:outputScript library="js" name="graph.js" target="body"></h:outputScript>
<h:outputScript library="js" name="interaction_interface.js"
	target="body"></h:outputScript>
<h:outputScript library="js" name="toolbar_interaction_interface.js"
	target="body"></h:outputScript>
<h:outputScript library="js" name="backend_interaction_interface.js"
	target="body"></h:outputScript>
<h:outputScript library="js" name="graph_interaction_interface.js"
	target="body"></h:outputScript>
<h:outputScript library="js" name="star_standard_methods.js" target="body"></h:outputScript>

<!-- CSS -->
<h:outputStylesheet library="css" name="squat_standard_style.css"
	target="head"></h:outputStylesheet>
<h:outputStylesheet library="css" name="header.css" target="head"></h:outputStylesheet>
<h:outputStylesheet library="css" name="toolbar.css" target="head"></h:outputStylesheet>
<h:outputStylesheet library="css" name="graph.css" target="head"></h:outputStylesheet>

<h:head id="head">
	<title>Architecture</title>
	<link rel="shortcut icon" type="image/x-icon" href="#{resource['icons/Graph_fav32.ico']}"/>
	<style>
	.radarStrokePopulation {opacity: #{sessionInfo.getCurrentProjectInfo().optionsInfo.populationTransparency};}
	</style>
</h:head>
<h:body id="body" styleClass="fullscreen-view">
	<h:form>
		<h:panelGroup id="colorMappingsDiv">
				<style id="colorMappings">
				<ui:repeat value="#{sessionInfo.getCurrentProjectInfo().colorInfo.getColorEntries()}" var="colorEntry">
					#graphOptions.Comparison-active .radarWrapper.c#{colorEntry.getKey()} .radarArea {	fill: #{colorEntry.getValue()}!important;}
					#graphOptions.Comparison-active .radarWrapper.c#{colorEntry.getKey()} .radarStroke {	stroke: #{colorEntry.getValue()}!important;}
					#graphOptions.Comparison-active .radarWrapper.c#{colorEntry.getKey()} .radarCircle {	fill: #{colorEntry.getValue()}!important;}
					#graphOptions.comparison-mode path.comparison-arc.c#{colorEntry.getKey()} {	fill: #{colorEntry.getValue()}!important;}
					#graphOptions.comparison-mode line.comparison-link.c#{colorEntry.getKey()} {	stroke: #{colorEntry.getValue()}!important;}
					#graphOptions.comparison-mode path.resource-line.c#{colorEntry.getKey()} {	stroke: #{colorEntry.getValue()}!important;}
				</ui:repeat>
				</style>
			</h:panelGroup>
			<pf:remoteCommand name="updateColorMappings" update="colorMappingsDiv"/>
	</h:form>

	<script>
		var candidateValues = '#{sessionInfo.getProjectDataAsCSV()}';
		var architectureComponents = '#{sessionInfo.getProjectArchitectureComponentsAsCSV()}';
		var architectureLinks = '#{sessionInfo.getProjectArchitectureComponentLinksAsCSV()}';
		var architectureServers = '#{sessionInfo.getProjectArchitectureServersAsCSV()}';
		var architectureAllocations = '#{sessionInfo.getProjectArchitectureAllocationsAsCSV()}';
		var architectureResources = '#{sessionInfo.getProjectArchitectureResourcesAsCSV()}';
		var architectureResourcesMetadata= '#{sessionInfo.getProjectArchitectureResourcesMetadataAsCSV()}';
		var parsedResources = d3.csvParse(architectureResources);
		var parsedResourcesMetadata = d3.csvParse(architectureResourcesMetadata);
		var parsedComponents = d3.csvParse(architectureComponents);
		var parsedComponents2 = d3.csvParse(architectureComponents);
		var parsedLinks = d3.csvParse(architectureLinks);
		var parsedValues = d3.csvParse(candidateValues);
		var parsedServers = d3.csvParse(architectureServers);
		var parsedAllocations = d3.csvParse(architectureAllocations);
		
		var linkDistance = #{sessionInfo.getCurrentProjectInfo().optionsInfo.linkLength};
		var linkDistanceBiGraph = #{sessionInfo.getCurrentProjectInfo().optionsInfo.linkLength};
	</script>

	<!-- NAVBAR -->
	<tp:header activeElement="graph">
	</tp:header>

	<div class="full-width h-100 mh-100  p-0 pb-1">
		<div id="graphOptions" class="row h-100 mh-100 p-0 m-0 #{sessionInfo.getCurrentProjectInfo().graphViewInfo.getShowPopulationStyle()} #{sessionInfo.getCurrentProjectInfo().graphViewInfo.getReduceGraphStyle()} #{sessionInfo.getCurrentProjectInfo().graphViewInfo.getMode()}-active">

			<!-- SIDEBAR START -->
			<tp:toolbar>
			</tp:toolbar>
			<!-- SIDEBAR END -->

			<div id="content" class="h-100 mh-100 ml-auto col-10">
				<div class="row row-box mh-6 p-1 m-0">
					<div id="graphOptionsRow" class="col-6 h-100 mh-100 p-0 m-0">
						<div class="row">
							<div class="col">
								<div class="dropdown">
									<button
										class="btn btn-outline-dark dropdown-toggle w-100 mw-100" type="button"
										id="graphModeDropdownMenuButton" data-toggle="dropdown"
										title="#{descriptionProvider.getDropdownGraphDescription()}"
										aria-haspopup="true" aria-expanded="false">
										#{sessionInfo.getCurrentProjectInfo().graphViewInfo.getMode()}</button>
									<div class="dropdown-menu w-100 mw-100 text-center"
										aria-labelledby="dropdownMenuButtonBig">
										<a class="dropdown-item" href="javascript:showAll()">All</a>
										<a class="dropdown-item" href="javascript:showComparison()">Comparison</a>
										<a class="dropdown-item" href="javascript:showMarked()">Marked</a>
										<a class="dropdown-item" href="javascript:showSelected()">Selected</a>
									</div>
								</div>
							</div>
							<div class="col">
								<div class="custom-control custom-checkbox">
									<c:choose>
										<c:when
											test="${sessionInfo.getCurrentProjectInfo().graphViewInfo.getShowPopulation()}">
											<input type="checkbox" id="showPopulationCheckbox"
												class="custom-control-input" checked="true"
												onchange="changePopulation()"> <label title="#{descriptionProvider.getShowPopulationStarDescription()}"
												class="custom-control-label" for="showPopulationCheckbox">Show
													Population</label> </input>
										</c:when>
										<c:otherwise>
											<input type="checkbox" id="showPopulationCheckbox"
												class="custom-control-input" onchange="changePopulation()">
												<label class="custom-control-label" title="#{descriptionProvider.getShowPopulationStarDescription()}"
												for="showPopulationCheckbox">Show Population</label> </input>
										</c:otherwise>
									</c:choose>
								</div>
							</div>
							<div class="col">
								<div class="custom-control custom-checkbox">
									<c:choose>
										<c:when
											test="${sessionInfo.getCurrentProjectInfo().graphViewInfo.getReduceGraph()}">
											<input type="checkbox" id="reduceGraphCheckbox"
												class="custom-control-input" checked="true"
												onchange="changeReduceGraph()">
												<label
												class="custom-control-label" title="#{descriptionProvider.getReduceGraphDescription()}" for="reduceGraphCheckbox">Reduce Graph
												</label>
											</input>
										</c:when>
										<c:otherwise>
											<input type="checkbox" id="reduceGraphCheckbox"
												class="custom-control-input" onchange="changeReduceGraph()">
												<label class="custom-control-label"  title="#{descriptionProvider.getReduceGraphDescription()}"
												for="reduceGraphCheckbox">Reduce Graph
												</label>
											</input>
										</c:otherwise>
									</c:choose>
								</div>
							</div>
						</div>
					</div>
				</div>

				<div class="row h-25 mh-25 p-0 pt-1 m-0">
					<div id="starOverview" class="col-2 h-100 mh-100 p-0 m-0">
						<div class="card vis-card h-100 mh-100">
							<div class="card-header font-weight-bold pr-1">GOALS
								<tp:headerHelpTag helpText="#{visualizationHelpTextProvider.getGraphGoalsText()}"/>
							</div>
							<div class="card-body m-0 p-1 scrollable">
								<div class="row m-0 p-0 h-100 w-100 mw-100 mh-100">
									<div class="col-12 m-0 p-0">
										<div id="starOverviewContent" class="h-100 mh-100 scrollable" style="text-align: center;">
											<tp:bigStar usePopulation="true"
												renderCandidates="parsedValues" population="parsedValues"
												width="100" outerElementId="'starOverviewContent'" showAxisTooltips="true"
												showAxisNames="false" dotRadius="3" wrapWidth="5" margin="10" minSize="50"/>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div id="resourcesOverview" class="col-10 h-100 mh-100 p-0 pl-1 m-0">
						<div class="card vis-card h-100 mh-100">
							<div class="card-header font-weight-bold pr-1">RESOURCES
								<tp:headerHelpTag helpText="#{visualizationHelpTextProvider.getGraphResourcesText()}"/>
							</div>
							<div class="card-body m-0 p-1 scrollable">
								<div id="resources-container" class="resources-container h-100 mh-100 mt-0 mb-0 scrollable">
										<script>
											renderParallelCoordinates(parsedResources, parsedResourcesMetadata);
										</script>
								</div>
							</div>
						</div>
					</div>
				</div>
					
				<div class="row h-69 mh-69 p-0 pt-1 m-0">
					<div id="componentsGraph" class="col-6 h-100 mh-100 p-0 m-0">
						<div class="card vis-card h-100 mh-100">
							<div class="card-header font-weight-bold pr-1">COMPONENTS
								<tp:headerHelpTag helpText="#{visualizationHelpTextProvider.getGraphComponentsText()}"/>
							</div>
							<div class="card-body m-0 p-1 scrollable">
								<div id="architecture-container" class="architecture-container h-100 mh-100 mt-0 mb-0">
										<script>render(parsedComponents, parsedLinks);</script>
								</div>
							</div>
						</div>
					</div>
					<div id="allocationsGraph" class="col-6 h-100 mh-100 p-0 pl-1 m-0">
						<div class="card vis-card h-100 mh-100">
							<div class="card-header font-weight-bold pr-1">ALLOCATION
								<tp:headerHelpTag helpText="#{visualizationHelpTextProvider.getGraphAllocationText()}"/>
							</div>
							<div class="card-body m-0 p-1 scrollable">
								<div id="allocation-container" class="allocation-container h-100 mh-100 mt-0 mb-0">
										<script>renderBiGraph(parsedComponents2, parsedServers, parsedAllocations);</script>
								</div>
							</div>
						</div>
					</div>
				</div>

				<tp:application_interaction_interface>
				</tp:application_interaction_interface>
				<tp:graph_callbacks>
				</tp:graph_callbacks>
			</div>
		</div>
	</div>
</h:body>
</html>